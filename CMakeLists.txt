cmake_minimum_required(VERSION 2.8)
PROJECT(MetaObject)
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
CMAKE_POLICY(SET CMP0020 NEW)
include("${CMAKE_CURRENT_LIST_DIR}/cmake/CMakeMacros.cmake")
list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")

set(link_libs "")


set(WITH_QT "TRUE" CACHE BOOL "Enable QT support")
set(WITH_PYTHON "TRUE" CACHE BOOL "Enable Python bindings")
set(WITH_OPENCV "TRUE" CACHE BOOL "Enable OpenCV types")
set(WITH_CUDA "TRUE" CACHE BOOL "Enable CUDA recompilation")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

include(cmake/OpenCVPCHSupport.cmake)

if(WITH_PYTHON)
  find_package(PythonLibs QUIET)
  find_package(PythonInterp QUIET)
  if(PythonLibs_FOUND AND PythonInterp_FOUND)
    find_package(Boost COMPONENTS python${PYTHON_VERSION_MAJOR})
    if(Boost_FOUND)
	    list(APPEND link_libs "${PYTHON_LIBRAY}")
            get_filename_component(python_lib_dir "${PYTHON_DEBUG_LIBRARY}" DIRECTORY)
            link_directories(${python_lib_dir})
	    include_directories(${PYTHON_INCLUDE_DIR})
	    add_definitions(-DHAVE_BOOST_PYTHON)
    endif()
  endif()
endif()

if(WIN32)
    SET(CMAKE_CXX_FLAGS "/EHsc /FC /Zi /MP /Zm512 /bigobj /FS" CACHE STRING "")
    SET(CMAKE_CXX_FLAGS_RELEASE "/Zo /d2Zi+ /Oy-" CACHE STRING "")
else(WIN32)
    SET(CMAKE_CXX_FLAGS "-std=c++11" CACHE STRING "" FORCE)
    list(APPEND link_libs pthread)
    add_definitions(-D_MWAITXINTRIN_H_INCLUDED)
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG")
endif(WIN32)
set(CMAKE_DEBUG_POSTFIX "d")
link_directories("${CMAKE_CURRENT_BINARY_DIR}")
file(GLOB_RECURSE src "src/*.cpp")
file(GLOB_RECURSE hdr "include/*.h" "include/*.hpp")
include_directories("${CMAKE_CURRENT_LIST_DIR}/include")

# ---------------------- External Dependencies ---------------------------------

# ---------------------- Boost ---------------------------------
set(Boost_required_components system thread log log_setup unit_test_framework)
set(Boost_USE_STATIC_LIBS        OFF)
set(Boost_USE_MULTITHREADED      ON)
set(Boost_USE_STATIC_RUNTIME     OFF)
ADD_DEFINITIONS(-DBOOST_ALL_DYN_LINK)
find_package(Boost REQUIRED COMPONENTS ${Boost_required_components})
  include_directories(${Boost_INCLUDE_DIRS})
  link_directories(${Boost_LIBRARY_DIR_DEBUG})
  link_directories(${Boost_LIBRARY_DIR})
  list(APPEND link_libs ${Boost_LIBRARIES})
  list(APPEND PROJECT_BIN_DIRS_DEBUG_ ${Boost_LIBRARY_DIR})
  list(APPEND PROJECT_BIN_DIRS_RELEASE_ ${Boost_LIBRARY_DIR})
  list(APPEND PROJECT_BIN_DIRS_RELWITHDEBINFO_ ${Boost_LIBRARY_DIR})
  list(APPEND PROJECT_BIN_DIRS_DEBUG_ ${Boost_LIBRARY_DIR_DEBUG})
  list(APPEND PROJECT_BIN_DIRS_RELEASE_ ${Boost_LIBRARY_DIR_RELEASE})
  list(APPEND PROJECT_BIN_DIRS_RELWITHDEBINFO_ ${Boost_LIBRARY_DIR_RELEASE})
  

# ---------------------- cereal ---------------------------------  
set(cereal_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/dependencies/cereal/include" CACHE PATH "")
find_package(cereal REQUIRED)
if(cereal_FOUND)
  include_directories(${cereal_INCLUDE_DIRS})
  message("Found cereal at: ${cereal_INCLUDE_DIRS}")
  add_definitions(-DHAVE_CEREAL)
endif()


# ---------------------- Optional dependencies ------------------
# Qt5
if(WITH_QT)
	find_package(Qt5 QUIET COMPONENTS Core Widgets Gui)
	if(Qt5_FOUND)
		message("Building with qt support")
		add_definitions(-DHAVE_QT5)
		QT5_WRAP_CPP(MOC "${CMAKE_CURRENT_LIST_DIR}/include/MetaObject/Parameters/UI/Qt/SignalProxy.hpp")
		list(APPEND src ${MOC})
		INCLUDE_DIRECTORIES(${Qt5Gui_INCLUDE_DIRS} ${Qt5Widgets_INCLUDE_DIRS} ${Qt5Core_INCLUDE_DIRS})
		list(APPEND link_libs Qt5::Core Qt5::Widgets Qt5::Gui)
		get_target_property(qt5_core_bin_ Qt5::Core IMPORTED_LOCATION_DEBUG)
		get_filename_component(qt5_bin_dir_ "${qt5_core_bin_}" DIRECTORY)
		list(APPEND PROJECT_BIN_DIRS_DEBUG_ ${qt5_bin_dir_})
	    list(APPEND PROJECT_BIN_DIRS_RELEASE_ ${qt5_bin_dir_})
	    list(APPEND PROJECT_BIN_DIRS_RELWITHDEBINFO_ ${qt5_bin_dir_})
	else()
	  message("Building without qt support")
	endif()
endif()

# WT
find_package(WT QUIET)
if(Wt_FOUND)
  add_definitions(-DHAVE_WT)
  include_directories(${WT_INCLUDE_DIRS})
  list(APPEND link_libs ${Wt_HTTP_LIBRARY} ${Wt_LIBRARY} ${Wt_DEBUG_LIBRARY} ${Wt_HTTP_DEBUG_LIBRARY})
  find_path(Wt_BIN_DIR NAMES wt.dll wtd.dll PATHS ENV ${Wt_DIR}/bin)
  set(WT_BIN_DIR ${Wt_BIN_DIR} CACHE PATH "" FORCE)
  set(WT_BIN_DIR_DBG ${Wt_BIN_DIR} CACHE PATH "" FORCE)
  set(WT_BIN_DIR_OPT ${Wt_BIN_DIR} CACHE PATH "" FORCE)
  SET(BIN_DIRS "${BIN_DIRS};WT" CACHE STRING "" FORCE)
endif(Wt_FOUND)

# OpenCV
if(WITH_OPENCV)
  find_package(OpenCV QUIET COMPONENTS core)
  if(OpenCV_FOUND)
    message("Building with opencv support: ${OpenCV_LIBS}")
    add_definitions(-DHAVE_OPENCV)
    include_directories(${OpenCV_INCLUDE_DIRS})
  else()
    message("Building without opencv support")
  endif()
endif(WITH_OPENCV)

# ZeroMQ
find_package(ZeroMQ QUIET)
if(${ZeroMQ_FOUND})
  message("Building with ZeroMQ")
  include_directories(${ZeroMQ_INCLUDE_DIR})
  include_directories("${CMAKE_CURRENT_LIST_DIR}/dependencies/cppzmq") # cpp bindings
  list(APPEND link_libs "optimized;${ZeroMQ_LIBRARY_RELEASE};debug;${ZeroMQ_LIBRARY_DEBUG}")
  add_definitions(-DHAVE_ZEROMQ)
endif(${ZeroMQ_FOUND})

# CUDA
if(WITH_CUDA)
  FIND_PACKAGE(CUDA QUIET)
  IF(${CUDA_FOUND})
    INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})
    ADD_DEFINITIONS(-DHAVE_CUDA)
	list(APPEND PROJECT_BIN_DIRS_DEBUG_ ${CUDA_BIN_DIR})
	list(APPEND PROJECT_BIN_DIRS_RELEASE_ ${CUDA_BIN_DIR})
	list(APPEND PROJECT_BIN_DIRS_RELWITHDEBINFO_ ${CUDA_BIN_DIR})
    if(GNUC)
        LIST(APPEND CUDA_NVCC_FLAGS "--std=c++11")
    endif(GNUC)
  ENDIF(${CUDA_FOUND})
endif(WITH_CUDA)



# ---------------------- rcc ---------------------------------  
SET(IObject_INCLUDE "${CMAKE_CURRENT_SOURCE_DIR}/include")
set(RCC_INCLUDE_DEPENDENCIES "${Boost_INCLUDE_DIRS};${CMAKE_CURRENT_LIST_DIR}/include;${cereal_INCLUDE_DIRS}")
set(RCC_LIBRARY_DIRS_DEBUG "${Boost_LIBRARY_DIR};${Boost_LIBRARY_DIR_DEBUG};${CMAKE_BINARY_DIR}/Debug")
set(RCC_LIBRARY_DIRS_RELWITHDEBINFO "${Boost_LIBRARY_DIR};${Boost_LIBRARY_DIR_DEBUG};${CMAKE_BINARY_DIR}/RelWithDebInfo")
if(MSVC)
set(RCC_COMPILE_FLAGS "/DBOOST_ALL_DYN_LINK")
else()
set(RCC_COMPILE_FLAGS "-DBOOST_ALL_DYN_LINK")
endif()
ADD_SUBDIRECTORY("dependencies/rcc")
include_directories(${RCC_INCLUDE_DIRS})
set_target_properties(RuntimeCompiler PROPERTIES FOLDER Dependencies)
set_target_properties(RuntimeObjectSystem PROPERTIES FOLDER Dependencies)
SET(RCC_INCLUDE_DIRS "${RCC_INCLUDE_DIRS}" PARENT_SCOPE)

set(MO_PROFILING_MODE "BUILTIN" CACHE STRING "Set MetaObject profiling mode")
set_property(CACHE MO_PROFILING_MODE PROPERTY STRINGS BUILTIN DYNAMIC NONE)
if(${MO_PROFILING_MODE} STREQUAL "BUILTIN")
  add_definitions(-DRMT_BUILTIN)
  list(APPEND link_libs Remotery)
endif()
if(${MO_PROFILING_MODE} STREQUAL "NONE")
  add_definitions(-DPROFILING_NONE)
endif()

add_definitions(-DRMT_USE_CUDA)


add_subdirectory("dependencies/Remotery")
set_target_properties(Remotery PROPERTIES FOLDER Dependencies)
GroupSources(include)
GroupSources(src)
#include_directories(dependencies/Remotery/lib)
add_library(MetaObject SHARED ${src} ${hdr} src/precompiled.hpp)
target_link_libraries(MetaObject 
  RuntimeObjectSystem 
  RuntimeCompiler 
  ${link_libs} 
  ${OpenCV_LIBS} 
  ${CUDA_CUDART_LIBRARY}
  ${CUDA_CUDA_LIBRARY}
)

ocv_add_precompiled_header_to_target(MetaObject src/precompiled.hpp)

# -------------------- instantiations --------------------------
file(GLOB_RECURSE instantiations_src "instantiations/*.cpp")
include_directories("instantiations")
add_library(instantiations SHARED ${instantiations_src})
set_target_properties(instantiations PROPERTIES FOLDER Dependencies)
target_link_libraries(instantiations MetaObject)
if(Qt5_FOUND)
  target_link_libraries(instantiations Qt5::Core Qt5::Gui Qt5::Widgets)
endif()
if(OpenCV_FOUND AND WITH_OPENCV)
  target_link_libraries(instantiations ${OpenCV_LIBS})
endif()

MACRO(SUBDIRLIST result curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
      LIST(APPEND dirlist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

# ----------------------- tests -----------------------------------
if(Boost_UNIT_TEST_FRAMEWORK_FOUND)
  include(CTest)
  enable_testing()
  SUBDIRLIST(tests "${CMAKE_CURRENT_LIST_DIR}/tests")
  foreach(test ${tests})
    file(GLOB_RECURSE test_srcs "tests/${test}/*.cpp")
    IF(CUDA_FOUND)
      file(GLOB_RECURSE test_knl "tests/${test}/*.cu")
    ENDIF()
    LIST(LENGTH test_knl num_knl)
    IF(${num_knl} GREATER 0)
      cuda_add_executable(${test} ${test_srcs} ${test_knl})
	else()
      add_executable(${test} ${test_srcs})
    endif()
    TARGET_LINK_LIBRARIES(${test} MetaObject ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY} ${link_libs} instantiations)
	if(OpenCV_FOUND)
	  TARGET_LINK_LIBRARIES(${test} ${OpenCV_LIBS})
	endif()
    ADD_DEPENDENCIES(${test} MetaObject)
    set_target_properties(${test} PROPERTIES FOLDER Tests/MetaObject)
    add_test(${test} ${test})
    if(MSVC)
      CONFIGURE_FILE("tests/Test.vcxproj.user.in" ${CMAKE_BINARY_DIR}/${test}.vcxproj.user @ONLY)
	  CONFIGURE_FILE("tests/Test.vcxproj.user.in" ${CMAKE_CURRENT_BINARY_DIR}/${test}.vcxproj.user @ONLY)
    endif()
  endforeach()
  
endif()

# ----------------------- examples ---------------------------
ADD_SUBDIRECTORY("examples")
